commit d68507707d8ae73399f117d929ef3b86fe2a9c99
Author: Brian T. Smith <bsmith@systemfabricworks.com>
Date:   Thu Jul 23 01:14:21 2020 +0000

    fixed verify_vcpus_limit from upstream

diff --git a/soca/cluster_manager/add_nodes.py b/soca/cluster_manager/add_nodes.py
index 09dae81..a9fbe9b 100644
--- a/soca/cluster_manager/add_nodes.py
+++ b/soca/cluster_manager/add_nodes.py
@@ -66,12 +66,12 @@ def verify_vcpus_limit(instance_type, desired_capacity, quota_info):
     cpus_count_pattern = re.search(r'[.](\d+)', instance_type)
     instance_family = instance_type[0].upper()
     if cpus_count_pattern:
-        vcpus_per_instance = int(cpus_count_pattern.group(1)) * 2
+        vcpus_per_instance = int(cpus_count_pattern.group(1)) * 4
     else:
         if 'xlarge' in instance_type:
-            vcpus_per_instance = 2
+            vcpus_per_instance = 4
         else:
-            vcpus_per_instance = 1
+            vcpus_per_instance = 2
 
     total_vpcus_requested = vcpus_per_instance * int(desired_capacity)
     running_vcpus = 0
@@ -100,10 +100,9 @@ def verify_vcpus_limit(instance_type, desired_capacity, quota_info):
                 token = False
 
             for quota in response["Quotas"]:
-                if "running on-demand" in quota["QuotaName"].lower() and instance_family in quota["QuotaName"]:
+                if "running on-demand" in quota["QuotaName"].lower() and instance_family in quota["QuotaName"].replace("Running",""):
                     max_vcpus_allowed = quota["Value"]
                     quota_name = quota["QuotaName"]
-                    print("Detected service quota for instance type {} with max concurrent cores {}".format(instance_type, max_vcpus_allowed))
     else:
         max_vcpus_allowed = quota_info[instance_type]["max_vcpus_allowed"]
         quota_name = quota_info[instance_type]["quota_name"]
@@ -117,10 +116,9 @@ def verify_vcpus_limit(instance_type, desired_capacity, quota_info):
     else:
         instances_family_allowed_in_quota = list(re.search(r"running on-demand (.*) instances", quota_name.lower()).group(1))
 
-
     if not quota_info or instance_type not in quota_info.keys():
         all_instances_available = ec2._service_model.shape_for('InstanceType').enum
-        all_instances_for_quota = [p for p in all_instances_available if any(substr in p for substr in instances_family_allowed_in_quota)]
+        all_instances_for_quota = [instance_family for x in instances_family_allowed_in_quota for instance_family in all_instances_available if instance_family.startswith(x.rstrip().lstrip())]
         # get all running instance
         token = True
         next_token = ''
@@ -140,12 +138,12 @@ def verify_vcpus_limit(instance_type, desired_capacity, quota_info):
             for reservation in response['Reservations']:
                 for instance in reservation['Instances']:
                     if "CpuOptions" in instance.keys():
-                        running_vcpus += instance["CpuOptions"]["CoreCount"]
+                        running_vcpus += instance["CpuOptions"]["CoreCount"] * 2
                     else:
                         if 'xlarge' in instance["InstanceType"]:
-                            running_vcpus += 2
+                            running_vcpus += 4
                         else:
-                            running_vcpus += 1
+                            running_vcpus += 2
 
         # Describe instance as a limit of 200 filters
         if len(all_instances_for_quota) > 150:
@@ -165,26 +163,25 @@ def verify_vcpus_limit(instance_type, desired_capacity, quota_info):
                 for reservation in response['Reservations']:
                     for instance in reservation['Instances']:
                         if "CpuOptions" in instance.keys():
-                            running_vcpus += instance["CpuOptions"]["CoreCount"]
+                            running_vcpus += instance["CpuOptions"]["CoreCount"] * 2
                         else:
                             if 'xlarge' in instance["InstanceType"]:
-                                running_vcpus += 2
+                                running_vcpus += 4
                             else:
-                                running_vcpus += 1
+                                running_vcpus += 2
     else:
         running_vcpus = quota_info[instance_type]["vcpus_provisioned"]
 
-    #print("Max Vcpus allowed {} \nDetected running Vcpus {} \nRequested Vcpus for this job {} \nQuota Name {}".format(max_vcpus_allowed, running_vcpus, total_vpcus_requested, quota_name))
     quota_info[instance_type] = {"max_vcpus_allowed": max_vcpus_allowed,
                                  "vcpus_provisioned": running_vcpus + total_vpcus_requested,
                                  "quota_name": quota_name}
+
     if max_vcpus_allowed >= (running_vcpus + total_vpcus_requested):
         return {"message": True, "quota_info": quota_info}
     else:
         return {"message": "Job cannot start due to AWS Service limit. Max Vcpus allowed {}. Detected running Vcpus {}. Requested Vcpus for this job {}. Quota Name {}".format(max_vcpus_allowed, running_vcpus, total_vpcus_requested, quota_name), "quota_info": quota_info}
 
 
-
 def can_launch_capacity(instance_type, desired_capacity, image_id, subnet_id):
     for instance in instance_type:
         try:
